# Приветствие и начало чеклиста
Write-Host '🧠 Запускаем предварительный чеклист по мнению шести мушкетеров...'

# Определяем путь к файлу JSON
$jsonFilePath = './voices.config.json'

# Проверяем существование файла JSON перед попыткой чтения
if (-not (Test-Path $jsonFilePath)) {
    Write-Host "❌ Ошибка: Файл '$jsonFilePath' не найден. Убедитесь, что он существует и находится в той же директории."
    exit 1 # Выходим из скрипта, так как файл не найден
}

try {
    # Считываем содержимое файла в кодировке UTF8
    # Используем `-ErrorAction Stop`, чтобы любая ошибка при чтении файла приводила к перехвату в блоке `catch`
    $fileContent = Get-Content $jsonFilePath -Encoding UTF8 -ErrorAction Stop

    # Преобразуем содержимое файла из JSON-строки в объект PowerShell
    # Используем `-ErrorAction Stop`, чтобы любая ошибка при преобразовании JSON приводила к перехвату в блоке `catch`
    $json = $fileContent | ConvertFrom-Json -ErrorAction Stop

    # Проверяем, что переменная $json действительно содержит объект и не является null
    if ($null -eq $json) {
        Write-Host "❌ Ошибка: Файл '$jsonFilePath' не содержит действительных JSON-данных или он пуст после преобразования."
        exit 1 # Выходим, если JSON не был успешно преобразован
    }

    # Если $json успешно загружен, продолжаем итерировать по его свойствам
    # `PSObject.Properties.Name` позволяет получить имена всех свойств объекта JSON
    if ($json.PSObject.Properties.Name) {
        foreach ($key in $json.PSObject.Properties.Name) {
            # Выводим каждый вопрос, используя ключ и соответствующее ему значение из JSON
            Write-Host "❓ $key спрашивает: $($json[$key])"
        }
    } else {
        # Сообщение, если JSON-файл загружен, но не содержит свойств верхнего уровня
        Write-Host "ℹ️ Информация: JSON-файл '$jsonFilePath' загружен, но не содержит свойств верхнего уровня."
    }

} catch {
    # Блок `catch` перехватывает любые ошибки, возникшие в блоке `try`
    # Выводим сообщение об ошибке и детали исключения
    Write-Host "❌ Произошла ошибка при обработке файла JSON:"
    Write-Host $_.Exception.Message
    exit 1 # Выходим из скрипта при возникновении ошибки
}

# Сообщение о завершении чеклиста, если все прошло успешно
Write-Host "✅ Если согласен — продолжай main deploy.ps1"

# Дополнительное сообщение или цитата после выполнения основной логики
Write-Host "Перед великим умом я склоняю голову, перед великим сердцем — преклоняю колени. — В. Гюго"
