// üìÅ src/components/QuantumClock.ts
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∂–∏–≤—ã—Ö —á–∞—Å–æ–≤ —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏ –≤ –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª–µ

import type { ClockData } from '../types';
import { DOMHelpers, TimeHelpers } from '../utils/helpers';
import { SELECTORS, ANIMATION_CONFIG } from '../utils/constants';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã–º–∏ —á–∞—Å–∞–º–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
export class QuantumClock {
  private timeElement: HTMLElement | null = null;
  private dateElement: HTMLElement | null = null;
  private msElement: HTMLElement | null = null;
  private intervalId: number = 0;
  private isRunning: boolean = false;

  constructor() {
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private init(): void {
    this.findElements();
    this.validateElements();
    this.start();
  }

  /**
   * –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
   */
  private findElements(): void {
    this.timeElement = DOMHelpers.getElement(SELECTORS.CLOCK_TIME);
    this.dateElement = DOMHelpers.getElement(SELECTORS.CLOCK_DATE);
    this.msElement = DOMHelpers.getElement(SELECTORS.CLOCK_MS);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
   */
  private validateElements(): void {
    if (!this.timeElement) {
      console.warn('‚ö†Ô∏è QuantumClock: Time element not found');
    }
    if (!this.dateElement) {
      console.warn('‚ö†Ô∏è QuantumClock: Date element not found');
    }
    if (!this.msElement) {
      console.warn('‚ö†Ô∏è QuantumClock: Milliseconds element not found');
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å–æ–≤
   */
  private updateClock(): void {
    const now = new Date();
    const clockData = this.generateClockData(now);
    this.renderClockData(clockData);
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Å–æ–≤
   */
  private generateClockData(date: Date): ClockData {
    return {
      hours: TimeHelpers.padZero(date.getHours()),
      minutes: TimeHelpers.padZero(date.getMinutes()),
      seconds: TimeHelpers.padZero(date.getSeconds()),
      milliseconds: TimeHelpers.padZeroThree(date.getMilliseconds()),
      date: TimeHelpers.formatDate(date)
    };
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Å–æ–≤ –≤ DOM
   */
  private renderClockData(clockData: ClockData): void {
    if (this.timeElement) {
      this.timeElement.textContent = `${clockData.hours}:${clockData.minutes}:${clockData.seconds}`;
    }
    
    if (this.dateElement) {
      this.dateElement.textContent = clockData.date;
    }
    
    if (this.msElement) {
      this.msElement.textContent = `${clockData.milliseconds}ms`;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Å—ã
   */
  public start(): void {
    if (this.isRunning) {
      console.warn('‚ö†Ô∏è QuantumClock: Already running');
      return;
    }

    console.log('‚è∞ QuantumClock: Starting...');
    
    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    this.updateClock();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10ms
    this.intervalId = window.setInterval(() => {
      this.updateClock();
    }, ANIMATION_CONFIG.CLOCK_UPDATE_INTERVAL);
    
    this.isRunning = true;
    console.log('‚úÖ QuantumClock: Started successfully');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã
   */
  public stop(): void {
    if (!this.isRunning) {
      console.warn('‚ö†Ô∏è QuantumClock: Not running');
      return;
    }

    console.log('‚èπÔ∏è QuantumClock: Stopping...');
    
    clearInterval(this.intervalId);
    this.intervalId = 0;
    this.isRunning = false;
    
    console.log('‚úÖ QuantumClock: Stopped successfully');
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Å—ã
   */
  public restart(): void {
    this.stop();
    this.start();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ —á–∞—Å—ã
   */
  public isActive(): boolean {
    return this.isRunning;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å–æ–≤
   */
  public getCurrentData(): ClockData {
    return this.generateClockData(new Date());
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
   */
  public setCustomTimeFormat(formatter: (date: Date) => string): void {
    if (this.timeElement) {
      this.timeElement.textContent = formatter(new Date());
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è –∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º
   */
  public addBlinkEffect(): void {
    if (!this.msElement) return;

    this.msElement.style.animation = 'pulse 0.5s ease-in-out infinite';
  }

  /**
   * –£–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è
   */
  public removeBlinkEffect(): void {
    if (!this.msElement) return;

    this.msElement.style.animation = '';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã
   */
  public getStats(): { 
    isRunning: boolean; 
    intervalId: number; 
    elementsFound: number;
    uptime: string;
  } {
    const elementsFound = [this.timeElement, this.dateElement, this.msElement]
      .filter(el => el !== null).length;

    return {
      isRunning: this.isRunning,
      intervalId: this.intervalId,
      elementsFound,
      uptime: this.isRunning ? 'Active' : 'Stopped'
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
   */
  public destroy(): void {
    console.log('üóëÔ∏è QuantumClock: Destroying...');
    
    this.stop();
    this.timeElement = null;
    this.dateElement = null;
    this.msElement = null;
    
    console.log('‚úÖ QuantumClock: Destroyed successfully');
  }
}