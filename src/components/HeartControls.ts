// üìÅ src/components/HeartControls.ts
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–¥–µ—á–µ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏

import type { Position } from '../types';
import { DOMHelpers, AnimationUtils, MathHelpers, IDHelpers } from '../utils/helpers';
import { SELECTORS, ANIMATION_CONFIG } from '../utils/constants';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
 * –°–æ–∑–¥–∞–µ—Ç –ª–µ—Ç–∞—é—â–∏–µ —Å–µ—Ä–¥–µ—á–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–±–∏—Ç–æ–≥–æ —Å–µ—Ä–¥—Ü–∞
 */
export class HeartControls {
  private heartElement: HTMLElement | null = null;
  private brokenHeartElement: HTMLElement | null = null;
  private activeHearts: Set<string> = new Set();
  private isInitialized: boolean = false;

  constructor() {
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private init(): void {
    console.log('üíñ HeartControls: Initializing...');
    
    this.findElements();
    this.validateElements();
    this.setupAnimations();
    this.bindEvents();
    
    this.isInitialized = true;
    console.log('‚úÖ HeartControls: Initialized successfully');
  }

  /**
   * –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–µ—Ä–¥–µ—á–µ–∫ –≤ DOM
   */
  private findElements(): void {
    this.heartElement = DOMHelpers.getElement(SELECTORS.HEART_BEAT);
    this.brokenHeartElement = DOMHelpers.getElement(SELECTORS.HEART_BROKEN);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
   */
  private validateElements(): void {
    if (!this.heartElement) {
      console.warn('‚ö†Ô∏è HeartControls: Heart element not found');
    }
    if (!this.brokenHeartElement) {
      console.warn('‚ö†Ô∏è HeartControls: Broken heart element not found');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CSS –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  private setupAnimations(): void {
    AnimationUtils.addFloatingAnimations();
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
   */
  private bindEvents(): void {
    if (this.heartElement) {
      this.heartElement.addEventListener('click', (e) => this.handleHeartClick(e));
    }
    
    if (this.brokenHeartElement) {
      this.brokenHeartElement.addEventListener('click', (e) => this.handleBrokenHeartClick(e));
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ —Å–µ—Ä–¥–µ—á–∫—É
   */
  private handleHeartClick(event: Event): void {
    event.preventDefault();
    
    if (!this.heartElement) return;

    console.log('üíì HeartControls: Heart clicked!');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∞–º–æ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞
    this.animateHeartBeat();
    
    // –°–æ–∑–¥–∞—Ç—å –ª–µ—Ç–∞—é—â–∏–µ —Å–µ—Ä–¥–µ—á–∫–∏
    this.createFloatingHearts();
  }

  /**
   * –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –±–∏–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
   */
  private animateHeartBeat(): void {
    if (!this.heartElement) return;

    // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    this.heartElement.style.animation = 'none';
    
    // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      if (this.heartElement) {
        this.heartElement.style.animation = 'heartBeat 0.3s ease-in-out 3';
      }
    }, 10);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–¥–µ—á–µ–∫
   */
  private createFloatingHearts(): void {
    const heartCount = MathHelpers.randomInt(3, 7);
    
    for (let i = 0; i < heartCount; i++) {
      setTimeout(() => {
        this.createSingleFloatingHeart();
      }, i * 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ–¥–Ω–æ –ª–µ—Ç–∞—é—â–µ–µ —Å–µ—Ä–¥–µ—á–∫–æ
   */
  private createSingleFloatingHeart(): void {
    if (!this.heartElement) return;

    const rect = DOMHelpers.getElementRect(this.heartElement);
    if (!rect) return;

    const heartId = IDHelpers.generateId('floating-heart');
    const randomOffset = MathHelpers.random(-30, 30);
    
    const startPosition: Position = {
      x: rect.left + randomOffset,
      y: rect.top
    };

    const heart = this.createFloatingHeartElement(heartId, startPosition);
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤ DOM
    document.body.appendChild(heart);
    this.activeHearts.add(heartId);
    
    // –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      this.removeFloatingHeart(heartId);
    }, ANIMATION_CONFIG.HEART_ANIMATION_DURATION);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç –ª–µ—Ç–∞—é—â–µ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞
   */
  private createFloatingHeartElement(id: string, position: Position): HTMLElement {
    const heart = DOMHelpers.createElement('div', 'floating-heart', '‚ù§Ô∏è');
    heart.id = id;
    
    // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const size = MathHelpers.random(1.2, 2.0);
    const rotation = MathHelpers.random(-15, 15);
    const horizontalDrift = MathHelpers.random(-50, 50);
    
    DOMHelpers.addStyles(heart, {
      position: 'fixed',
      left: `${position.x}px`,
      top: `${position.y}px`,
      fontSize: `${size}rem`,
      color: '#ff59a5',
      pointerEvents: 'none',
      zIndex: '9999',
      transform: `rotate(${rotation}deg)`,
      animation: `floatUp 3s ease-out forwards, heartFloat 3s ease-in-out infinite`,
      filter: 'drop-shadow(0 0 10px rgba(255, 89, 165, 0.6))'
    });

    // –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    heart.style.setProperty('--horizontal-drift', `${horizontalDrift}px`);
    
    return heart;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ª–µ—Ç–∞—é—â–µ–µ —Å–µ—Ä–¥–µ—á–∫–æ
   */
  private removeFloatingHeart(heartId: string): void {
    const heart = DOMHelpers.getElement(`#${heartId}`);
    if (heart) {
      DOMHelpers.removeElement(heart);
      this.activeHearts.delete(heartId);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ —Ä–∞–∑–±–∏—Ç–æ–º—É —Å–µ—Ä–¥—Ü—É
   */
  private handleBrokenHeartClick(event: Event): void {
    event.preventDefault();
    
    if (!this.brokenHeartElement) return;

    console.log('üíî HeartControls: Broken heart clicked!');
    
    this.animateBrokenHeart();
    this.createBrokenHeartEffect();
  }

  /**
   * –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–±–∏—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ
   */
  private animateBrokenHeart(): void {
    if (!this.brokenHeartElement) return;

    AnimationUtils.shakeElement(this.brokenHeartElement, 500);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É
    const originalContent = this.brokenHeartElement.textContent;
    this.brokenHeartElement.textContent = 'üíî';
    
    setTimeout(() => {
      if (this.brokenHeartElement) {
        this.brokenHeartElement.textContent = originalContent;
      }
    }, 1000);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–±–∏—Ç–æ–≥–æ —Å–µ—Ä–¥—Ü–∞
   */
  private createBrokenHeartEffect(): void {
    if (!this.brokenHeartElement) return;

    const rect = DOMHelpers.getElementRect(this.brokenHeartElement);
    if (!rect) return;

    // –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–∫–æ–ª–∫–æ–≤
    const fragments = ['üíî', 'üñ§', '‚ö°', 'üí®'];
    
    fragments.forEach((fragment, index) => {
      setTimeout(() => {
        this.createBrokenFragment(fragment, rect, index);
      }, index * 200);
    });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ—Å–∫–æ–ª–æ–∫ —Ä–∞–∑–±–∏—Ç–æ–≥–æ —Å–µ—Ä–¥—Ü–∞
   */
  private createBrokenFragment(content: string, parentRect: DOMRect, index: number): void {
    const fragmentId = IDHelpers.generateId('broken-fragment');
    const fragment = DOMHelpers.createElement('div', 'broken-fragment', content);
    fragment.id = fragmentId;
    
    const angle = (index * 90) + MathHelpers.random(-30, 30); // –†–∞–∑–ª–µ—Ç –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    const distance = MathHelpers.random(50, 100);
    const endX = parentRect.left + Math.cos(MathHelpers.toRadians(angle)) * distance;
    const endY = parentRect.top + Math.sin(MathHelpers.toRadians(angle)) * distance;
    
    DOMHelpers.addStyles(fragment, {
      position: 'fixed',
      left: `${parentRect.left}px`,
      top: `${parentRect.top}px`,
      fontSize: '1.5rem',
      pointerEvents: 'none',
      zIndex: '9999',
      transition: 'all 1s ease-out',
      opacity: '1'
    });
    
    document.body.appendChild(fragment);
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–µ—Ç
    setTimeout(() => {
      DOMHelpers.addStyles(fragment, {
        left: `${endX}px`,
        top: `${endY}px`,
        opacity: '0',
        transform: 'scale(0.5) rotate(180deg)'
      });
    }, 50);
    
    // –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      DOMHelpers.removeElement(fragment);
    }, 1500);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ —ç–∫—Ä–∞–Ω–∞
   */
  public createHeartsAt(position: Position, count: number = 3): void {
    for (let i = 0; i < count; i++) {
      setTimeout(() => {
        const heartId = IDHelpers.generateId('custom-heart');
        const offsetPosition: Position = {
          x: position.x + MathHelpers.random(-20, 20),
          y: position.y + MathHelpers.random(-20, 20)
        };
        
        const heart = this.createFloatingHeartElement(heartId, offsetPosition);
        document.body.appendChild(heart);
        this.activeHearts.add(heartId);
        
        setTimeout(() => {
          this.removeFloatingHeart(heartId);
        }, ANIMATION_CONFIG.HEART_ANIMATION_DURATION);
      }, i * 150);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–∂–¥—å –∏–∑ —Å–µ—Ä–¥–µ—á–µ–∫
   */
  public startHeartRain(duration: number = 5000): void {
    console.log('üíñ HeartControls: Starting heart rain!');
    
    const interval = setInterval(() => {
      const position: Position = {
        x: MathHelpers.random(0, window.innerWidth),
        y: -50 // –ù–∞—á–∏–Ω–∞—Ç—å —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
      };
      
      this.createHeartsAt(position, 1);
    }, 300);
    
    setTimeout(() => {
      clearInterval(interval);
      console.log('üíñ HeartControls: Heart rain stopped');
    }, duration);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–¥–µ—á–µ–∫
   */
  public getStats(): {
    activeHeartsCount: number;
    isInitialized: boolean;
    elementsFound: number;
  } {
    const elementsFound = [this.heartElement, this.brokenHeartElement]
      .filter(el => el !== null).length;

    return {
      activeHeartsCount: this.activeHearts.size,
      isInitialized: this.isInitialized,
      elementsFound
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–¥–µ—á–∫–∏
   */
  public clearAllHearts(): void {
    console.log('üßπ HeartControls: Clearing all hearts...');
    
    this.activeHearts.forEach(heartId => {
      this.removeFloatingHeart(heartId);
    });
    
    this.activeHearts.clear();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    console.log('üóëÔ∏è HeartControls: Destroying...');
    
    this.clearAllHearts();
    
    // –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    if (this.heartElement) {
      this.heartElement.removeEventListener('click', this.handleHeartClick);
    }
    
    if (this.brokenHeartElement) {
      this.brokenHeartElement.removeEventListener('click', this.handleBrokenHeartClick);
    }
    
    this.heartElement = null;
    this.brokenHeartElement = null;
    this.isInitialized = false;
    
    console.log('‚úÖ HeartControls: Destroyed successfully');
  }
}