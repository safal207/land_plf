// üìÅ src/components/ParticleSystem.ts
// –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü –¥–ª—è —Ñ–æ–Ω–∞

import type { Particle, Position } from '../types';
import { DOMHelpers, MathHelpers, IDHelpers } from '../utils/helpers';
import { COLORS, ANIMATION_CONFIG } from '../utils/constants';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —á–∞—Å—Ç–∏—Ü
 * –°–æ–∑–¥–∞–µ—Ç –∏ –∞–Ω–∏–º–∏—Ä—É–µ—Ç —á–∞—Å—Ç–∏—Ü—ã –≤ —Ñ–æ–Ω–µ
 */
export class ParticleSystem {
  private particles: Particle[] = [];
  private container: HTMLElement;
  private animationId: number = 0;
  private isRunning: boolean = false;
  private particleCount: number;
  private containerBounds: DOMRect | null = null;

  constructor(containerId: string, particleCount: number = ANIMATION_CONFIG.PARTICLE_COUNT) {
    this.particleCount = particleCount;
    this.container = this.findContainer(containerId);
    this.init();
  }

  /**
   * –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Å—Ç–∏—Ü
   */
  private findContainer(containerId: string): HTMLElement {
    const container = DOMHelpers.getElement(containerId);
    if (!container) {
      console.warn(`‚ö†Ô∏è ParticleSystem: Container '${containerId}' not found, using body`);
      return document.body;
    }
    return container;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü
   */
  private init(): void {
    console.log('‚ú® ParticleSystem: Initializing...');
    
    this.updateContainerBounds();
    this.createParticles();
    this.start();
    
    console.log(`‚úÖ ParticleSystem: Created ${this.particles.length} particles`);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private updateContainerBounds(): void {
    this.containerBounds = this.container.getBoundingClientRect();
    console.log('Container bounds updated:', this.containerBounds); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏—Ü—ã
   */
  private createParticles(): void {
    for (let i = 0; i < this.particleCount; i++) {
      const particle = this.generateParticle(i);
      this.particles.push(particle);
      this.createParticleElement(particle);
    }
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏—Ü—ã
   */
  private generateParticle(index: number): Particle {
    const colors = [
      COLORS.primary + '40', // 40 - –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ hex
      'rgba(124, 246, 227, 0.3)',
      'rgba(198, 255, 247, 0.2)'
    ];

    return {
      id: IDHelpers.generateId('particle'),
      x: MathHelpers.random(0, 100),
      y: MathHelpers.random(0, 100),
      size: MathHelpers.random(2, 6),
      opacity: MathHelpers.random(0.3, 0.7),
      velocity: {
        x: MathHelpers.random(-0.5, 0.5),
        y: MathHelpers.random(-0.5, 0.5)
      },
      color: colors[index % colors.length]
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —á–∞—Å—Ç–∏—Ü—ã
   */
  private createParticleElement(particle: Particle): void {
    const element = DOMHelpers.createElement('div', 'particle');
    element.id = particle.id;
    
    const animationDelay = MathHelpers.random(0, ANIMATION_CONFIG.PARTICLE_SPEED);
    const animationDuration = MathHelpers.random(4, 8);
    
    DOMHelpers.addStyles(element, {
      position: 'absolute',
      left: `${particle.x}%`,
      top: `${particle.y}%`,
      width: `${particle.size}px`,
      height: `${particle.size}px`,
      background: particle.color,
      borderRadius: '50%',
      animation: `float ${animationDuration}s ease-in-out infinite`,
      animationDelay: `${animationDelay}s`,
      opacity: particle.opacity.toString(),
      pointerEvents: 'none'
    });
    
    this.container.appendChild(element);
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —á–∞—Å—Ç–∏—Ü
   */
  private animate(): void {
    if (!this.isRunning) return;

    this.particles.forEach(particle => {
      this.updateParticlePosition(particle);
      this.handleBoundaryCollision(particle);
      this.updateParticleElement(particle);
    });

    this.animationId = requestAnimationFrame(() => this.animate());
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —á–∞—Å—Ç–∏—Ü—ã
   */
  private updateParticlePosition(particle: Particle): void {
    particle.x += particle.velocity.x;
    particle.y += particle.velocity.y;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
   */
  private handleBoundaryCollision(particle: Particle): void {
    // –û—Ç—Å–∫–æ–∫ –æ—Ç –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü
    if (particle.x <= 0 || particle.x >= 100) {
      particle.velocity.x *= -1;
      particle.x = MathHelpers.clamp(particle.x, 0, 100);
    }
    
    // –û—Ç—Å–∫–æ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü
    if (particle.y <= 0 || particle.y >= 100) {
      particle.velocity.y *= -1;
      particle.y = MathHelpers.clamp(particle.y, 0, 100);
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç —á–∞—Å—Ç–∏—Ü—ã
   */
  private updateParticleElement(particle: Particle): void {
    const element = DOMHelpers.getElement(`#${particle.id}`);
    if (element) {
      DOMHelpers.addStyles(element, {
        left: `${particle.x}%`,
        top: `${particle.y}%`
      });
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
   */
  public start(): void {
    if (this.isRunning) {
      console.warn('‚ö†Ô∏è ParticleSystem: Already running');
      return;
    }

    console.log('‚ñ∂Ô∏è ParticleSystem: Starting animation...');
    this.isRunning = true;
    this.animate();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
   */
  public stop(): void {
    if (!this.isRunning) {
      console.warn('‚ö†Ô∏è ParticleSystem: Not running');
      return;
    }

    console.log('‚èπÔ∏è ParticleSystem: Stopping animation...');
    this.isRunning = false;
    
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = 0;
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —á–∞—Å—Ç–∏—Ü—É
   */
  public addParticle(position?: Position): void {
    const particle = this.generateParticle(this.particles.length);
    
    if (position) {
      particle.x = (position.x / window.innerWidth) * 100;
      particle.y = (position.y / window.innerHeight) * 100;
    }
    
    this.particles.push(particle);
    this.createParticleElement(particle);
    
    console.log(`‚ûï ParticleSystem: Added particle at (${particle.x.toFixed(1)}, ${particle.y.toFixed(1)})`);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç–∏—Ü—É –ø–æ ID
   */
  public removeParticle(particleId: string): void {
    const index = this.particles.findIndex(p => p.id === particleId);
    if (index === -1) return;

    const particle = this.particles[index];
    const element = DOMHelpers.getElement(`#${particle.id}`);
    
    if (element) {
      DOMHelpers.removeElement(element);
    }
    
    this.particles.splice(index, 1);
    console.log(`‚ûñ ParticleSystem: Removed particle ${particleId}`);
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
   */
  public setParticleCount(count: number): void {
    const currentCount = this.particles.length;
    
    if (count > currentCount) {
      // –î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—Ü—ã
      for (let i = currentCount; i < count; i++) {
        this.addParticle();
      }
    } else if (count < currentCount) {
      // –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã
      const toRemove = this.particles.slice(count);
      toRemove.forEach(particle => this.removeParticle(particle.id));
    }
    
    this.particleCount = count;
    console.log(`üî¢ ParticleSystem: Particle count set to ${count}`);
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —á–∞—Å—Ç–∏—Ü
   */
  public setVelocityMultiplier(multiplier: number): void {
    this.particles.forEach(particle => {
      particle.velocity.x *= multiplier;
      particle.velocity.y *= multiplier;
    });
    
    console.log(`‚ö° ParticleSystem: Velocity multiplier set to ${multiplier}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
   */
  public getStats(): {
    particleCount: number;
    isRunning: boolean;
    animationId: number;
    containerElement: string;
  } {
    return {
      particleCount: this.particles.length,
      isRunning: this.isRunning,
      animationId: this.animationId,
      containerElement: this.container.tagName.toLowerCase()
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏—Ü—É –ø–æ ID
   */
  public getParticle(particleId: string): Particle | undefined {
    return this.particles.find(p => p.id === particleId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏—Ü—ã
   */
  public getAllParticles(): Particle[] {
    return [...this.particles]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  public restart(newParticleCount?: number): void {
    console.log('üîÑ ParticleSystem: Restarting...');
    
    this.destroy();
    
    if (newParticleCount) {
      this.particleCount = newParticleCount;
    }
    
    this.particles = [];
    this.init();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    console.log('üóëÔ∏è ParticleSystem: Destroying...');
    
    this.stop();
    
    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Å—Ç–∏—Ü
    this.particles.forEach(particle => {
      const element = DOMHelpers.getElement(`#${particle.id}`);
      DOMHelpers.removeElement(element);
    });
    
    this.particles = [];
    this.containerBounds = null;
    
    console.log('‚úÖ ParticleSystem: Destroyed successfully');
  }
}