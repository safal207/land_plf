// üìÅ src/components/EmailForm.ts
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã email –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

import type { EmailFormData, ValidationResult } from '../types';
import { DOMHelpers, ValidationHelpers, TimeHelpers } from '../utils/helpers';
import { SELECTORS, TEXT } from '../utils/constants';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π email –ø–æ–¥–ø–∏—Å–∫–∏
 * –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 */
export class EmailForm {
  private form: HTMLFormElement | null = null;
  private emailInput: HTMLInputElement | null = null;
  private submitButton: HTMLButtonElement | null = null;
  private successMessage: HTMLElement | null = null;
  private errorMessage: HTMLElement | null = null;
  private isSubmitting: boolean = false;
  private isInitialized: boolean = false;

  constructor() {
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private init(): void {
    console.log('üìß EmailForm: Initializing...');
    
    this.findElements();
    this.validateElements();
    this.bindEvents();
    this.setupInitialState();
    
    this.isInitialized = true;
    console.log('‚úÖ EmailForm: Initialized successfully');
  }

  /**
   * –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –≤ DOM
   */
  private findElements(): void {
    this.form = DOMHelpers.getElement<HTMLFormElement>(SELECTORS.EMAIL_FORM);
    this.emailInput = DOMHelpers.getElement<HTMLInputElement>(SELECTORS.EMAIL_INPUT);
    this.submitButton = DOMHelpers.getElement<HTMLButtonElement>(SELECTORS.SUBMIT_BUTTON);
    this.successMessage = DOMHelpers.getElement(SELECTORS.SUCCESS_MESSAGE);
    
    // Error message —Å–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    this.errorMessage = DOMHelpers.getElement('.error-message');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
   */
  private validateElements(): void {
    if (!this.form) {
      console.warn('‚ö†Ô∏è EmailForm: Form element not found');
    }
    if (!this.emailInput) {
      console.warn('‚ö†Ô∏è EmailForm: Email input not found');
    }
    if (!this.submitButton) {
      console.warn('‚ö†Ô∏è EmailForm: Submit button not found');
    }
    if (!this.successMessage) {
      console.warn('‚ö†Ô∏è EmailForm: Success message element not found');
    }
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
   */
  private bindEvents(): void {
    if (this.form) {
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }
    
    if (this.emailInput) {
      this.emailInput.addEventListener('input', () => this.handleInputChange());
      this.emailInput.addEventListener('blur', () => this.handleInputBlur());
      this.emailInput.addEventListener('focus', () => this.handleInputFocus());
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  private setupInitialState(): void {
    this.hideMessages();
    this.resetButtonState();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
   */
  private async handleSubmit(event: Event): Promise<void> {
    event.preventDefault();
    
    if (!this.emailInput || !this.submitButton || this.isSubmitting) return;

    console.log('üì§ EmailForm: Form submitted');
    
    const formData: EmailFormData = {
      email: this.emailInput.value.trim()
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const validation = this.validateEmailInput(formData.email);
    if (!validation.isValid) {
      this.showError(validation.message || TEXT.ERROR_INVALID_EMAIL);
      this.shakeForm();
      return;
    }

    try {
      await this.submitEmail(formData);
    } catch (error) {
      console.error('‚ùå EmailForm: Submission error:', error);
      this.showError(TEXT.ERROR_GENERAL);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å email –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤ —Ñ–æ—Ä–º—É
   */
  private validateEmailInput(email: string): ValidationResult {
    return ValidationHelpers.validateEmail(email);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Å–∏–º—É–ª—è—Ü–∏—è)
   */
  private async submitEmail(data: EmailFormData): Promise<void> {
    this.setSubmittingState(true);
    
    try {
      console.log('üöÄ EmailForm: Submitting email:', data.email);
      
      // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
      await this.simulateAPICall(data);
      
      this.showSuccess();
      this.clearForm();
      
      console.log('‚úÖ EmailForm: Email submitted successfully');
    } finally {
      this.setSubmittingState(false);
    }
  }

  /**
   * –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å
   */
  private async simulateAPICall(data: EmailFormData): Promise<void> {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await TimeHelpers.delay(1500);
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –æ—à–∏–±–∫–∏ (5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    if (Math.random() < 0.05) {
      throw new Error('Network error');
    }
    
    // –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å:
    // const response = await fetch('/api/subscribe', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify(data)
    // });
    
    console.log('üì° EmailForm: API call simulated for:', data.email);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  private setSubmittingState(isSubmitting: boolean): void {
    this.isSubmitting = isSubmitting;
    
    if (!this.submitButton) return;

    if (isSubmitting) {
      this.submitButton.textContent = TEXT.PROCESSING;
      this.submitButton.disabled = true;
      this.submitButton.style.opacity = '0.7';
    } else {
      this.resetButtonState();
    }
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
   */
  private resetButtonState(): void {
    if (!this.submitButton) return;
    
    this.submitButton.textContent = TEXT.CTA_BUTTON;
    this.submitButton.disabled = false;
    this.submitButton.style.opacity = '1';
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  private showSuccess(): void {
    this.hideMessages();
    
    if (this.successMessage) {
      this.successMessage.style.display = 'block';
      this.successMessage.style.animation = 'fadeInUp 0.5s ease-out';
      
      // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.hideSuccess();
      }, 5000);
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  private hideSuccess(): void {
    if (this.successMessage) {
      this.successMessage.style.display = 'none';
      this.successMessage.style.animation = '';
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private showError(message: string): void {
    this.hideMessages();
    
    // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!this.errorMessage) {
      this.createErrorElement();
    }
    
    if (this.errorMessage) {
      this.errorMessage.textContent = message;
      this.errorMessage.style.display = 'block';
      this.errorMessage.style.animation = 'fadeInUp 0.3s ease-out';
      
      // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        this.hideError();
      }, 4000);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
   */
  private createErrorElement(): void {
    if (!this.form) return;
    
    this.errorMessage = DOMHelpers.createElement('div', 'error-message');
    
    DOMHelpers.addStyles(this.errorMessage, {
      color: '#ff4444',
      textAlign: 'center',
      fontWeight: '600',
      marginTop: '1rem',
      display: 'none',
      fontSize: '0.9rem',
      padding: '10px',
      backgroundColor: 'rgba(255, 68, 68, 0.1)',
      border: '1px solid rgba(255, 68, 68, 0.3)',
      borderRadius: '6px'
    });
    
    this.form.appendChild(this.errorMessage);
  }

  /**
   * –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private hideError(): void {
    if (this.errorMessage) {
      this.errorMessage.style.display = 'none';
      this.errorMessage.style.animation = '';
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private hideMessages(): void {
    this.hideSuccess();
    this.hideError();
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
   */
  private clearForm(): void {
    if (this.emailInput) {
      this.emailInput.value = '';
      this.emailInput.classList.remove('error', 'success');
    }
  }

  /**
   * –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  private shakeForm(): void {
    if (this.form) {
      this.form.style.animation = 'shake 0.5s ease-in-out';
      setTimeout(() => {
        if (this.form) {
          this.form.style.animation = '';
        }
      }, 500);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–≤–æ–¥–∞
   */
  private handleInputChange(): void {
    if (!this.emailInput) return;
    
    // –£–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    this.emailInput.classList.remove('error');
    this.hideError();
    
    // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —É—Å–ø–µ—Ö–∞ –µ—Å–ª–∏ email –≤–∞–ª–∏–¥–Ω—ã–π
    const validation = this.validateEmailInput(this.emailInput.value);
    if (validation.isValid) {
      this.emailInput.classList.add('success');
    } else {
      this.emailInput.classList.remove('success');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Ç–µ—Ä—é —Ñ–æ–∫—É—Å–∞
   */
  private handleInputBlur(): void {
    if (!this.emailInput) return;
    
    const email = this.emailInput.value.trim();
    if (email && !this.validateEmailInput(email).isValid) {
      this.emailInput.classList.add('error');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
   */
  private handleInputFocus(): void {
    if (!this.emailInput) return;
    
    this.emailInput.classList.remove('error');
    this.hideError();
  }

  /**
   * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Å email
   */
  public submitWithEmail(email: string): Promise<void> {
    if (!this.emailInput) {
      return Promise.reject(new Error('Email input not found'));
    }
    
    this.emailInput.value = email;
    return this.submitEmail({ email });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π email –∏–∑ —Ñ–æ—Ä–º—ã
   */
  public getCurrentEmail(): string {
    return this.emailInput?.value.trim() || '';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π email
   */
  public isCurrentEmailValid(): boolean {
    const email = this.getCurrentEmail();
    return this.validateEmailInput(email).isValid;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å placeholder –¥–ª—è input
   */
  public setPlaceholder(placeholder: string): void {
    if (this.emailInput) {
      this.emailInput.placeholder = placeholder;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ä–º—ã
   */
  public getStats(): {
    isInitialized: boolean;
    isSubmitting: boolean;
    currentEmail: string;
    isEmailValid: boolean;
    elementsFound: number;
  } {
    const elementsFound = [this.form, this.emailInput, this.submitButton, this.successMessage]
      .filter(el => el !== null).length;

    return {
      isInitialized: this.isInitialized,
      isSubmitting: this.isSubmitting,
      currentEmail: this.getCurrentEmail(),
      isEmailValid: this.isCurrentEmailValid(),
      elementsFound
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    console.log('üóëÔ∏è EmailForm: Destroying...');
    
    this.hideMessages();
    
    // –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    if (this.form) {
      this.form.removeEventListener('submit', this.handleSubmit);
    }
    
    if (this.emailInput) {
      this.emailInput.removeEventListener('input', this.handleInputChange);
      this.emailInput.removeEventListener('blur', this.handleInputBlur);
      this.emailInput.removeEventListener('focus', this.handleInputFocus);
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏
    this.form = null;
    this.emailInput = null;
    this.submitButton = null;
    this.successMessage = null;
    this.errorMessage = null;
    this.isInitialized = false;
    
    console.log('‚úÖ EmailForm: Destroyed successfully');
  }
}